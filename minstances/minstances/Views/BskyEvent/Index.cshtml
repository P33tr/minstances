@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<script src="https://d3js.org/d3.v6.min.js"></script>

<h1>Bsky Firehose Refactored to generate events</h1>
<div>
    <p>
        @Html.ActionLink("Create Timer", "CreateTimer", "BskyEvent", new { }, new { @class = "btn btn-primary" })
    <p>
            @Html.ActionLink("Process Likes", "ProcessLikes", "BskyEvent", new { }, new { @class = "btn btn-primary" })
    </p>
    </p>
</div>


<div hx-ext="sse" sse-connect="/bsky-eventsse">
    <div class="row">
        <div class="col-md-10">
            <div id="chat-container" sse-swap="newNode" hx-swap="afterbegin" hidden>
            </div>
            <div id="chat1-container" sse-swap="newLink" hx-swap="afterbegin" hidden>
            </div>
        </div>
    </div>
</div>
<svg width="960" height="600"></svg>

<script type="text/javascript">

        var nodes = [];
        var links = [];

        var width = window.innerWidth, height = window.innerHeight;
        var  svg = d3.select('svg')
            .attr('width', width)
            .attr('height', height)
            .call(d3.zoom()
            .on('zoom', (event) => { svg.attr('transform', event.transform); }))
            .append('g');

        var simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id).distance(100))
            .force("charge", d3.forceManyBody().strength(-200))
            .force("center", d3.forceCenter(width / 2, height / 2));

        var node = svg.append("g")
            .selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r",  d => d.group ==1 ?25:50)
            .attr("fill", d => d.group ==1 ?"red":"blue");

        var link = svg.append("g")
            .selectAll("line")
            .data(links)
            .enter()
            .append("line")
            .attr("stroke", "black")
            .attr("stroke-width",1.5);

    function updateGraph()
        {
            link = link.data(links);
            link.exit().remove();
            link = link.enter().append("line")
                .attr("stroke", "black")
                .attr("stroke-width", 1.5)
                .merge(link);
            node = node.data(nodes);
            node.exit().remove();
            node = node.enter().append("circle")
            .attr("r",  d => d.group ==1 ?25:50)
                .attr("fill", d => d.group ==1 ?"red":"blue")
                .merge(node)
                .call(d3.drag()
                .on('start', dragstarted)
                .on('drag', dragged)
                .on('end', dragended));
           simulation.nodes(nodes);
           simulation.force("link").links(links);
           simulation.alpha(1).restart();
           }


        htmx.on("htmx:sseBeforeMessage", function (event) {
            console.log({event});
           // console.log("SSE message received:", event.detail);
            var data = event.detail.data;
           // console.log({data});
            switch(event.detail.type){
                case 'newNode':
                    //console.log('newMessage');
                    addNode(data);
                    break;
                case 'newLink':
                    console.log('newMessage');
                    addLink(data);
                    break;
                default:
                    console.log('default');
                    break;
            }
         });



        function dragstarted(event) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
        }
        function dragged(event) {
            event.subject.fx = event.x; 
            event.subject.fy = event.y;
        }
        function dragended(event) {
            if (!event.active) simulation.alphaTarget(0);
            event.subject.fx = null; event.subject.fy = null;
        }



        // function toolbar do the drag
        //================================================================================================
        function drag(simulation) {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }
            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }
            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;  }
                return d3.drag()
                .on('start', dragstarted)
                .on('drag', dragged)
                .on('end', dragended);
            }

            // function to add a new node
            //================================================================================================
        function addNode(singleNodeJson){


            const newNode  = JSON.parse(singleNodeJson);
            //console.log({newNode});
                newNode.fill = newNode.group==1 ?"red":"blue";
            nodes.push(newNode);

            updateGraph();
        }

        function addLink(singleLinkJson){
            const newLink  = JSON.parse(singleLinkJson);
            console.log({newLink});
            links.push(newLink);

            updateGraph();
        }
    simulation.on("tick", () => {
    link
           .attr("x1", d => d.source.x)
           .attr("y1", d => d.source.y)
           .attr("x2", d => d.target.x)
           .attr("y2", d => d.target.y);
     node.attr("cx", d => d.x)
         .attr("cy", d => d.y);

           });
</script>